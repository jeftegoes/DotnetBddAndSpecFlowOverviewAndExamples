// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TableAssistHelper.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class HelperCompareToSetFeature : object, Xunit.IClassFixture<HelperCompareToSetFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "HelperCompareToSet.feature"
#line hidden
        
        public HelperCompareToSetFeature(HelperCompareToSetFeature.FixtureData fixtureData, TableAssistHelper_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "HelperCompareToSet", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductID",
                        "StockQty",
                        "Basket"});
            table7.AddRow(new string[] {
                        "1",
                        "2",
                        "0"});
            table7.AddRow(new string[] {
                        "2",
                        "0",
                        "0"});
            table7.AddRow(new string[] {
                        "3",
                        "2",
                        "1"});
            table7.AddRow(new string[] {
                        "4",
                        "5",
                        "1"});
#line 4
 testRunner.Given("I have the following data using CompareToSet", ((string)(null)), table7, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Testing functionality of basket using CompareToSet")]
        [Xunit.TraitAttribute("FeatureTitle", "HelperCompareToSet")]
        [Xunit.TraitAttribute("Description", "Testing functionality of basket using CompareToSet")]
        [Xunit.InlineDataAttribute("In stock", "1", "1", "1", "\'Added to basket \'", new string[0])]
        [Xunit.InlineDataAttribute("Not in stock", "2", "0", "0", "\'Not in stock\'", new string[0])]
        [Xunit.InlineDataAttribute("Already in basket", "3", "2", "1", "\'Limited to one only\'", new string[0])]
        public virtual void TestingFunctionalityOfBasketUsingCompareToSet(string testDescription, string product, string stock, string basket, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test Description", testDescription);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("Stock", stock);
            argumentsOfScenario.Add("Basket", basket);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing functionality of basket using CompareToSet", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 12
 testRunner.Given(string.Format("I am on the product detail page of product {0}", product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.When("I click the Add to Basket button using CompareToSet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product ID",
                            "StockQty",
                            "Basket"});
                table8.AddRow(new string[] {
                            string.Format("{0}", product),
                            string.Format("{0}", stock),
                            string.Format("{0}", basket)});
#line 14
 testRunner.Then("the quantities are", ((string)(null)), table8, "Then ");
#line hidden
#line 17
 testRunner.And(string.Format("a message {0} is displayed to the customer using CompareToSet", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer can add product to basket using CompareToSet")]
        [Xunit.TraitAttribute("FeatureTitle", "HelperCompareToSet")]
        [Xunit.TraitAttribute("Description", "Customer can add product to basket using CompareToSet")]
        public virtual void CustomerCanAddProductToBasketUsingCompareToSet()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer can add product to basket using CompareToSet", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "ProductId",
                            "1"});
                table9.AddRow(new string[] {
                            "StockQty",
                            "2"});
                table9.AddRow(new string[] {
                            "Basket",
                            "0"});
#line 25
 testRunner.Given("I have the following data using CompareToSet", ((string)(null)), table9, "Given ");
#line hidden
#line 30
 testRunner.When("I click the Add to Basket button using CompareToSet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "StockQty",
                            "Basket"});
                table10.AddRow(new string[] {
                            "1",
                            "1"});
#line 31
 testRunner.Then("the quantities are", ((string)(null)), table10, "Then ");
#line hidden
#line 34
 testRunner.And("a message \'Added to basket\' is displayed to the customer using CompareToSet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                HelperCompareToSetFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                HelperCompareToSetFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
